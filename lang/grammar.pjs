// PEG grammar for a minimal programming language

Program
  = Expression
//  = l:(_ (Statement / Function) _)

Function "function"
  = "fun" _ id:Identifier _ "(" Parameters ")" _ (":" _ Identifier _)? _ (Statement)* _ "end"

Parameter "parameter" = Identifier _ ":" _ Identifier

Parameters = (Parameter (_ "," _ Parameter)*)?

Statement
  = Variable
  / Assignment
  / Repeat
  / While
  / If
  / Expression

Variable
  = "var" _ id:Identifier _ (":" _ typeName:Identifier _)? "=" _ init: Expression
  { return { kind: "variable", location: location(), name: id, typeName: typeof typeName === undefined ? typeName : null, init: init }; }

Assignment
  = id:Identifier _ "=" _ Expression

Repeat
  = "repeat" _ Expression _ "times" _ (Statement)* _ "end"

While
  = "while" _ Expression _ "do" _ (Statement)* _ "end"

If
  = "if" _ Expression _ "then" _ (Statement)* _ ("elseif" _ Expression _ "then" _ (Statement)*)* ("else" _ (Statement)*)? _ "end"

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)*
  {
    if (tail.length == 0) return head;

  	return tail.reduce(function(result, element) {
    	return { kind: "binaryOp", operator: element[1], left: result, right: element[3] }
    }, head);
  }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)*
  {
    if (tail.length == 0) return head;

  	return tail.reduce(function(result, element) {
    	return { kind: "binaryOp", operator: element[1], left: result, right: element[3] }
    }, head);
  }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Integer
  / String
  / CallOrIdentifier

CallOrIdentifier "function call or variable name"
  = id:Identifier _ args:Arguments?
  {
  	if (args == null) return { kind: "variableAccess", location: location(), name: id };
    return { kind: "functionCall", location: location(), name: id, args: args };
  }

Arguments "arguments"
  = "(" _ (Expression ( _ "," Expression)*) _ ")"

Integer "integer"
  = [0-9]+("."[0-9]+)? { return { kind: "number", location: location(), value: parseFloat(text(), 10) }; }

String "string"
  = '"' chars:StringCharacter* '"'
  { return { kind: "string", value: JSON.stringify(chars.join("")) }; }

StringCharacter
  = '\\' '"' { return '"'; }
  / !'"' . { return text(); }

Identifier "identifier"
  = !Reserved [a-zA-Z_]+
  { return { kind: "identifier", location: location(), value: text() }; }

Reserved
  = "var"
  / "fun"
  / "end"
  / "repeat"
  / "while"
  / "if"
  / "then"
  / "else"
  / "elseif"
  / "times"

_ "whitespace"
  = [ \t\n\r]* { return "whitespace"; }
